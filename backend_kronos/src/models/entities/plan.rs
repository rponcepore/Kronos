//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "plan")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub unit: String,
    pub parent_plan: Option<i32>,
    pub fiscal_year: i32,
    pub serial_number: i32,
    pub classification: String,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::kronos_order::Entity")]
    KronosOrder,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Id",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::unit::Entity",
        from = "Column::Unit",
        to = "super::unit::Column::Uic",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Unit,
}

impl Related<super::kronos_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KronosOrder.def()
    }
}

impl Related<super::unit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Unit.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
