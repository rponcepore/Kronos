//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "unit")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uic: String,
    pub echelon: String,
    pub nickname: String,
    pub display_name: String,
    pub short_name: String,
    pub component: String,
    pub state_abbrev: Option<String>,
    pub level: Option<i32>,
    pub service_member_capacity: Option<i32>,
    pub parent_uic: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::plan::Entity")]
    Plan,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Uic",
        to = "Column::Uic",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
}

impl Related<super::plan::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Plan.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
